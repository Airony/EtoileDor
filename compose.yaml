services:
    backend:
        build:
            dockerfile: ./backend/Dockerfile
        environment:
            - PORT=3456
            - FRONTEND_URL=http://frontend:7979
        depends_on:
            database-setup:
                condition: service_completed_successfully
        networks:
            back-network:
                aliases:
                    - backend
            front-network:
    database:
        build:
            dockerfile: ./database/Dockerfile
        restart: always
        command:
            [
                "--replSet",
                "rs0",
                "--bind_ip_all",
                "--port",
                "27017",
                "--keyFile",
                "/data/replica.key",
            ]
        healthcheck:
            test: mongosh --host 127.0.0.1:27017 --eval 'db.adminCommand("ping")' || exit 1
            interval: 180s
            timeout: 20s
            retries: 15
            start_period: 20s
        networks:
            - back-network
    database-setup:
        image: mongo:7.0.14-jammy
        depends_on:
            database:
                condition: service_healthy
        restart: on-failure
        entrypoint:
            ["/bin/bash", "-c", "chmod +x /setup_mongo.sh && /setup_mongo.sh"]
        volumes:
            - ./database/setup_mongo.sh:/setup_mongo.sh
        networks:
            back-network:
    frontend:
        build:
            dockerfile: ./frontend/Dockerfile
        environment:
            - API_URL=http://backend:3456/api # Back network
            - PUBLIC_API_URL=/api # Front network
            - CMS_URL=http://backend:3456
        networks:
            back-network:
                aliases:
                    - frontend
    nginx:
        build:
            context: ./nginx
        environment:
            - NGINX_ENVSUBST_OUTPUT_DIR=/etc/nginx
            - CMS_URL=http://backend:3456
        ports:
            - 80:80
            - 443:443
        networks:
            - front-network
            - back-network
networks:
    back-network:
        driver: bridge
        internal: true
    front-network:
        driver: bridge
        internal: false
